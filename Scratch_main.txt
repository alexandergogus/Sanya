#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include "Class.h"

bool isWall(const sf::Image& collisionMap, const sf::Vector2f& position) {
    if (position.x < 0 || position.y < 0 ||
        position.x >= collisionMap.getSize().x ||
        position.y >= collisionMap.getSize().y) {
        return true;
    }
    sf::Color pixel = collisionMap.getPixel(static_cast<unsigned int>(position.x),
                                         static_cast<unsigned int>(position.y));
    return pixel == sf::Color::Black;
}

bool checkCollision(const sf::Image& collisionMap, const sf::FloatRect& bounds) {
    // Check four corners and center
    sf::Vector2f points[] = {
        {bounds.left, bounds.top},
        {bounds.left + bounds.width, bounds.top},
        {bounds.left, bounds.top + bounds.height},
        {bounds.left + bounds.width, bounds.top + bounds.height},
        {bounds.left + bounds.width/2, bounds.top + bounds.height/2}
    };

    for (const auto& point : points) {
        if (isWall(collisionMap, point)) {
            return true;
        }
    }
    return false;
}

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "SFML Game with Camera");
    window.setFramerateLimit(60);

    // Load textures
    sf::Texture mapTexture;
    if (!mapTexture.loadFromFile("map1.png")) {
        std::cerr << "Failed to load map texture!" << std::endl;
        return -1;
    }

    sf::Image collisionMap;
    if (!collisionMap.loadFromFile("map1.png")) {
        std::cerr << "Failed to load collision map!" << std::endl;
        return -1;
    }

    sf::Texture playerTexture;
    if (!playerTexture.loadFromFile("серега.png")) {
        std::cerr << "Failed to load player texture!" << std::endl;
        return -1;
    }

    // Setup sprites
    sf::Sprite mapSprite(mapTexture);
    sf::Sprite playerSprite(playerTexture);
    
    // Setup player
    main_character player("Hero", 100, 200);
    const float PLAYER_SCALE = 0.5f;
    playerSprite.setScale(PLAYER_SCALE, PLAYER_SCALE);
    sf::Vector2f playerPosition(400, 400);
    playerSprite.setPosition(playerPosition);
    playerSprite.setOrigin(playerTexture.getSize().x / 2.0f, playerTexture.getSize().y / 2.0f);

    // Setup camera
    sf::View view = window.getDefaultView();
    view.setCenter(playerPosition);

    // Create NPCs
    std::vector<fuckers> evilProfs;
    evilProfs.emplace_back("Dr. Evil", 50, 100, 10);
    
    std::vector<normal_professors> niceProfs;
    niceProfs.emplace_back("Dr. Nice", 60, 80);
    
    std::vector<groopmates> friends;
    friends.emplace_back("Buddy", 80, 120, 5);

    // Game loop
    sf::Clock clock;
    while (window.isOpen()) {
        float deltaTime = clock.restart().asSeconds();
        
        // Event handling
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Movement
        sf::Vector2f movement(0.f, 0.f);
        float moveSpeed = player.getVelocity() * deltaTime;

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) movement.y -= moveSpeed;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) movement.y += moveSpeed;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) movement.x -= moveSpeed;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) movement.x += moveSpeed;

        // Update position with collision check
        if (movement.x != 0.f || movement.y != 0.f) {
            sf::Vector2f newPosition = playerPosition + movement;
            playerSprite.setPosition(newPosition);
            
            // Flip sprite based on movement direction
            if (movement.x < 0) playerSprite.setScale(-PLAYER_SCALE, PLAYER_SCALE);
            else if (movement.x > 0) playerSprite.setScale(PLAYER_SCALE, PLAYER_SCALE);

            // Check collision
            if (!checkCollision(collisionMap, playerSprite.getGlobalBounds())) {
                playerPosition = newPosition;
            } else {
                playerSprite.setPosition(playerPosition);
            }
        }

        // Update camera
        view.setCenter(playerPosition);
        
        // Keep camera within map bounds
        sf::Vector2f viewSize = view.getSize();
        sf::Vector2f viewHalfSize = viewSize / 2.f;
        sf::Vector2f mapSize(mapTexture.getSize());
        
        float cameraX = std::clamp(playerPosition.x, viewHalfSize.x, mapSize.x - viewHalfSize.x);
        float cameraY = std::clamp(playerPosition.y, viewHalfSize.y, mapSize.y - viewHalfSize.y);
        view.setCenter(cameraX, cameraY);
        
        window.setView(view);

        // Check NPC interactions
        sf::FloatRect playerRect(playerPosition.x - 25, playerPosition.y - 25, 50, 50);
        for (auto& npc : evilProfs) {
            // You'll need to track NPC positions and check them here
            // Example: if (playerRect.intersects(npc.getBounds())) npc.interaction(&player);
        }

        // Drawing
        window.clear();
        
        // Draw map relative to camera
        mapSprite.setPosition(view.getCenter() - viewHalfSize);
        window.draw(mapSprite);
        
        window.draw(playerSprite);
        window.display();
    }

    return 0;
}
